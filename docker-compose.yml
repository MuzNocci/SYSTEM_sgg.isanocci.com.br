services:

  nginx:
    container_name: "isasgg_nginx"
    restart: always
    tty: false
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8010:80"
    volumes:
      - ./django/staticfiles:/var/www/public/staticfiles
      - ./django/medias:/var/www/public/medias
    depends_on:
      - django
    networks:
      - isasgg_network

  django:
    container_name: "isasgg_django"
    restart: always
    tty: false
    build:
      context: ./django
      dockerfile: Dockerfile
    env_file:
      - "./django/.env"
    volumes:
      - ./django/staticfiles:/var/www/public/staticfiles
      - ./django/medias:/var/www/public/medias
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - isasgg_network

  postgres:
    container_name: "isasgg_postgres"
    restart: always
    tty: false
    build:
      context: ./postgres
      dockerfile: Dockerfile
    env_file:
      - "./postgres/.env"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    networks:
      - isasgg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    container_name: "isasgg_adminer"
    restart: always
    tty: false
    build:
      context: ./adminer
      dockerfile: Dockerfile
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - isasgg_network

  redis:
    container_name: "isasgg_redis"
    restart: always
    tty: false
    build:
      context: ./redis
      dockerfile: Dockerfile
    networks:
      - isasgg_network

volumes:
  postgres_data:

networks:
  isasgg_network: